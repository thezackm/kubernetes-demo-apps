apiVersion: v1
kind: Service
metadata:
  name: redis-primary
  labels:
    app: redis
    tier: backend
    role: primary
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis
    tier: backend
    role: primary
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-primary
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
      tier: backend
      role: primary
  template:
    metadata:
      labels:
        app: redis
        role: primary
        tier: backend
    spec:
      containers:
      - name: primary
        image: gcr.io/google_containers/redis:e2e  # or just image: redis
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: redis-replica
  labels:
    app: redis
    tier: backend
    role: replica
spec:
  ports:
  - port: 6379
  selector:
    app: redis
    tier: backend
    role: replica
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-replica
  labels:
    app: redis
    tier: backend
    role: replica
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
      tier: backend
      role: replica
  template:
    metadata:
      labels:
        app: redis
        role: replica
        tier: backend
    spec:
      containers:
      - name: replica
        image: gcr.io/google_samples/gb-redisslave:v1
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: GET_HOSTS_FROM
          value: dns
          # If your cluster config does not include a dns service, then to
          # instead access an environment variable to find the primary
          # service's host, comment out the 'value: dns' line above, and
          # uncomment the line below:
          # value: env
        ports:
        - containerPort: 6379
